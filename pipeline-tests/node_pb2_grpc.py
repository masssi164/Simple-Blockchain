# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import node_pb2 as node__pb2

GRPC_GENERATED_VERSION = '1.73.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in node_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class MiningStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Mine = channel.unary_unary(
                '/de.flashyotter.blockchain_node.grpc.Mining/Mine',
                request_serializer=node__pb2.Empty.SerializeToString,
                response_deserializer=node__pb2.Block.FromString,
                _registered_method=True)


class MiningServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Mine(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MiningServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Mine': grpc.unary_unary_rpc_method_handler(
                    servicer.Mine,
                    request_deserializer=node__pb2.Empty.FromString,
                    response_serializer=node__pb2.Block.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'de.flashyotter.blockchain_node.grpc.Mining', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('de.flashyotter.blockchain_node.grpc.Mining', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Mining(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Mine(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/de.flashyotter.blockchain_node.grpc.Mining/Mine',
            node__pb2.Empty.SerializeToString,
            node__pb2.Block.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class WalletStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send = channel.unary_unary(
                '/de.flashyotter.blockchain_node.grpc.Wallet/Send',
                request_serializer=node__pb2.SendRequest.SerializeToString,
                response_deserializer=node__pb2.Transaction.FromString,
                _registered_method=True)
        self.Info = channel.unary_unary(
                '/de.flashyotter.blockchain_node.grpc.Wallet/Info',
                request_serializer=node__pb2.Empty.SerializeToString,
                response_deserializer=node__pb2.WalletInfo.FromString,
                _registered_method=True)
        self.History = channel.unary_unary(
                '/de.flashyotter.blockchain_node.grpc.Wallet/History',
                request_serializer=node__pb2.HistoryRequest.SerializeToString,
                response_deserializer=node__pb2.TxList.FromString,
                _registered_method=True)


class WalletServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Send(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def History(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WalletServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Send': grpc.unary_unary_rpc_method_handler(
                    servicer.Send,
                    request_deserializer=node__pb2.SendRequest.FromString,
                    response_serializer=node__pb2.Transaction.SerializeToString,
            ),
            'Info': grpc.unary_unary_rpc_method_handler(
                    servicer.Info,
                    request_deserializer=node__pb2.Empty.FromString,
                    response_serializer=node__pb2.WalletInfo.SerializeToString,
            ),
            'History': grpc.unary_unary_rpc_method_handler(
                    servicer.History,
                    request_deserializer=node__pb2.HistoryRequest.FromString,
                    response_serializer=node__pb2.TxList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'de.flashyotter.blockchain_node.grpc.Wallet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('de.flashyotter.blockchain_node.grpc.Wallet', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Wallet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Send(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/de.flashyotter.blockchain_node.grpc.Wallet/Send',
            node__pb2.SendRequest.SerializeToString,
            node__pb2.Transaction.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/de.flashyotter.blockchain_node.grpc.Wallet/Info',
            node__pb2.Empty.SerializeToString,
            node__pb2.WalletInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def History(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/de.flashyotter.blockchain_node.grpc.Wallet/History',
            node__pb2.HistoryRequest.SerializeToString,
            node__pb2.TxList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ChainStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Latest = channel.unary_unary(
                '/de.flashyotter.blockchain_node.grpc.Chain/Latest',
                request_serializer=node__pb2.Empty.SerializeToString,
                response_deserializer=node__pb2.Block.FromString,
                _registered_method=True)
        self.Page = channel.unary_unary(
                '/de.flashyotter.blockchain_node.grpc.Chain/Page',
                request_serializer=node__pb2.PageRequest.SerializeToString,
                response_deserializer=node__pb2.BlockList.FromString,
                _registered_method=True)


class ChainServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Latest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Page(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ChainServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Latest': grpc.unary_unary_rpc_method_handler(
                    servicer.Latest,
                    request_deserializer=node__pb2.Empty.FromString,
                    response_serializer=node__pb2.Block.SerializeToString,
            ),
            'Page': grpc.unary_unary_rpc_method_handler(
                    servicer.Page,
                    request_deserializer=node__pb2.PageRequest.FromString,
                    response_serializer=node__pb2.BlockList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'de.flashyotter.blockchain_node.grpc.Chain', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('de.flashyotter.blockchain_node.grpc.Chain', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Chain(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Latest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/de.flashyotter.blockchain_node.grpc.Chain/Latest',
            node__pb2.Empty.SerializeToString,
            node__pb2.Block.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Page(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/de.flashyotter.blockchain_node.grpc.Chain/Page',
            node__pb2.PageRequest.SerializeToString,
            node__pb2.BlockList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
