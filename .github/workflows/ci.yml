# .github/workflows/ci.yml
name: Java&nbsp;CI

on:
  push:
    branches: [ "main" ]   # adjust if you use a different default branch
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        java-version: [ "17" ]   # add more versions if you want a matrix

    steps:
    - name: ⬇️  Checkout sources
      uses: actions/checkout@v4

    - name: Set up Temurin JDK
      uses: actions/setup-java@v4
      with:
        distribution: "temurin"
        java-version: ${{ matrix.java-version }}
        cache: gradle              # enable Gradle build‑cache between runs

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        cache-dependency-path: ui/package-lock.json

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Build & test (Gradle)
      run: ./gradlew clean bootJar jacocoTestReport --no-daemon

    - name: Upload node JAR (artifact)
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: blockchain-node-jar
        path: blockchain-node/build/libs/**/*.jar

    - name: Upload core JAR (artifact)
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: blockchain-core-jar
        path: blockchain-core/build/libs/**/*.jar

    - name: Install UI dependencies
      working-directory: ui
      run: npm ci

    - name: Run UI unit tests
      working-directory: ui
      run: npm run test -- --run

    - name: Build runtime image
      run: docker build -t simple-blockchain-node:runtime -f Dockerfile.backend .

    - name: Start Selenium container
      run: docker run -d --name selenium -p 4444:4444 selenium/standalone-chrome

    - name: Build & start multi-node setup
      id: compose
      run: |
        docker compose -f docker-compose.ci.yml up -d --build
        docker compose -f docker-compose.ci.yml ps
        for i in {1..30}; do
          if docker compose -f docker-compose.ci.yml ps | grep -q "healthy"; then
            break
          fi
          sleep 5
        done

    - name: Dump logs if compose failed
      if: failure() && steps.compose.outcome == 'failure'
      run: |
        docker compose -f docker-compose.ci.yml ps
        docker compose -f docker-compose.ci.yml logs --no-color

    - name: Run end-to-end tests
      run: |
        pip install selenium requests PyJWT behave grpcio protobuf
        behave pipeline-tests/e2e.feature

    - name: Dump logs on test failure
      if: failure()
      run: docker compose -f docker-compose.ci.yml logs --no-color

    - name: Stop containers
      if: always()
      run: |
        docker compose -f docker-compose.ci.yml down
        docker rm -f selenium
