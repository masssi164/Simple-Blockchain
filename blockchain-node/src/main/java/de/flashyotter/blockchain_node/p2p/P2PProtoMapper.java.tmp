package de.flashyotter.blockchain_node.p2p;

import com.google.protobuf.ByteString;
import blockchain.core.model.Block;
import blockchain.core.model.Transaction;
import blockchain.core.serialization.JsonUtils;
import de.flashyotter.blockchain_node.dto.JwtEnabledDto;
import de.flashyotter.blockchain_node.dto.P2PMessageDto;
import de.flashyotter.blockchain_node.dto.NewBlockDto;
import de.flashyotter.blockchain_node.dto.NewTxDto;
import de.flashyotter.blockchain_node.dto.NodesDto;
import de.flashyotter.blockchain_node.dto.BlocksDto;
import de.flashyotter.blockchain_node.dto.GetBlocksDto;
import lombok.NonNull;
import java.util.List;

/** Utility converting blocks and transactions to protobuf P2P messages and back. */
public final class P2PProtoMapper {
    private P2PProtoMapper() {}

    /** Convert DTO to protobuf message */
    public static P2PMessage fromDto(@NonNull P2PMessageDto dto) {
        P2PMessage.Builder builder = P2PMessage.newBuilder();
        if (dto instanceof NewBlockDto blockDto) {
            builder.setNewBlock(NewBlock.newBuilder()
                .setBlockData(ByteString.copyFromUtf8(blockDto.rawBlockJson())));
        } else if (dto instanceof NewTxDto txDto) {
            builder.setNewTx(NewTx.newBuilder()
                .setTxData(ByteString.copyFromUtf8(txDto.rawTxJson())));
        } else if (dto instanceof NodesDto nodesDto) {
            builder.setPeerList(PeerList.newBuilder()
                .addAllPeerUri(nodesDto.peers()));
        } else if (dto instanceof BlocksDto blocksDto) {
            builder.setBlocks(Blocks.newBuilder()
                .addAllBlockData(blocksDto.rawBlocks().stream()
                    .map(ByteString::copyFromUtf8)
                    .toList()));
        } else if (dto instanceof GetBlocksDto getBlocksDto) {
            builder.setGetBlocks(GetBlocks.newBuilder()
                .setFromHeight(getBlocksDto.fromHeight()));
        } else {
            throw new IllegalArgumentException("Unsupported DTO type: " + dto.getClass());
        }

        if (dto.getJwt() != null) {
            builder.setJwt(dto.getJwt());
        }
        return builder.build();
    }

    /** Convert protobuf message to DTO */
    public static P2PMessageDto fromProto(@NonNull P2PMessage msg) {
        P2PMessageDto dto = switch (msg.getMessageTypeCase()) {
            case NEW_BLOCK -> new NewBlockDto(msg.getNewBlock().getBlockData().toStringUtf8());
            case NEW_TX -> new NewTxDto(msg.getNewTx().getTxData().toStringUtf8());
            case PEER_LIST -> new NodesDto(msg.getPeerList().getPeerUriList());
            case BLOCKS -> new BlocksDto(msg.getBlocks().getBlockDataList().stream()
                .map(ByteString::toStringUtf8)
                .toList());
            case GET_BLOCKS -> new GetBlocksDto(msg.getGetBlocks().getFromHeight());
            case ERROR -> null; // TODO: Add ErrorDto or handle differently
            case FIND_NODE -> null; // TODO: Add FindNodeDto or handle differently
            case HANDSHAKE -> null; // TODO: Add HandshakeDto or handle differently
            default -> throw new IllegalStateException("Unexpected message type: " + msg.getMessageTypeCase());
        };
        if (dto != null && msg.hasJwt()) {
            return switch (dto) {
                case NewBlockDto nb -> new NewBlockDto(nb.rawBlockJson(), msg.getJwt());
                case NewTxDto nt -> new NewTxDto(nt.rawTxJson(), msg.getJwt());
                case NodesDto nd -> new NodesDto(nd.peers(), msg.getJwt());
                case BlocksDto bd -> new BlocksDto(bd.rawBlocks(), msg.getJwt());
                case GetBlocksDto gb -> new GetBlocksDto(gb.fromHeight(), msg.getJwt());
                default -> dto;
            };
        }
        return dto;
    }

    /** Shortcut to create a new block message */
    public static P2PMessage blockToNewBlock(@NonNull Block block) {
        String json = JsonUtils.toJson(block);
        return P2PMessage.newBuilder()
            .setNewBlock(NewBlock.newBuilder()
                .setBlockData(ByteString.copyFromUtf8(json))
                .build())
            .build();
    }

    /** Shortcut to create a new transaction message */
    public static P2PMessage transactionToNewTx(@NonNull Transaction tx) {
        String json = JsonUtils.toJson(tx);
        return P2PMessage.newBuilder()
            .setNewTx(NewTx.newBuilder()
                .setTxData(ByteString.copyFromUtf8(json))
                .build())
            .build();
    }

    /** Shortcut to create a handshake message */
    public static P2PMessage createHandshake(@NonNull String nodeUri) {
        return P2PMessage.newBuilder()
            .setHandshake(Handshake.newBuilder()
                .setNodeUri(nodeUri)
                .build())
            .build();
    }

    /** Shortcut to create a get blocks message */
    public static P2PMessage getBlocks(int fromHeight) {
        return P2PMessage.newBuilder()
            .setGetBlocks(GetBlocks.newBuilder()
                .setFromHeight(fromHeight)
                .build())
            .build();
    }

    /** Shortcut to create a find node message */
    public static P2PMessage findNode() {
        return P2PMessage.newBuilder()
            .setFindNode(FindNode.newBuilder().build())
            .build();
    }

    /** Shortcut to create an error message */
    public static P2PMessage error(@NonNull String message) {
        return P2PMessage.newBuilder()
            .setError(message)
            .build();
    }
}
