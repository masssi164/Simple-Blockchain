plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot'      version '3.5.1'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.palantir.docker'           version '0.36.0'
}

group   = 'de.flashyotter'
version = '0.0.1-SNAPSHOT'

java {
    toolchain { languageVersion = JavaLanguageVersion.of(21) }
}

configurations {
    compileOnly { extendsFrom annotationProcessor }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
    implementation project(':blockchain-core')

    implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'org.web3j:core:4.9.4'

    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'io.projectreactor.netty:reactor-netty-http'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
    implementation 'com.google.guava:guava'
    implementation 'org.iq80.leveldb:leveldb:0.12'

    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.2.0'
    implementation 'io.github.resilience4j:resilience4j-reactor:2.2.0'

    compileOnly          'org.projectlombok:lombok:1.18.30'
    annotationProcessor  'org.projectlombok:lombok:1.18.30'

    testImplementation 'org.awaitility:awaitility:4.2.0'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly    'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

tasks.named('jacocoTestReport') {
    dependsOn 'test'
}
docker {
    name       "blockchain-node:latest"
    dockerfile file('Dockerfile')
    files      "build/libs/${project.name}-${project.version}.jar"
}

// 1) sorg daf√ºr, dass das JAR gebaut ist, bevor das Image gebaut wird
tasks.named('docker') { dependsOn 'bootJar' }

// 2) und stell hiermit sicher, dass auch der dockerPrepare-Task
//    die JAR-Datei nicht vor ihrer Erzeugung kopiert
tasks.named('dockerPrepare') {
    dependsOn tasks.named('bootJar')
}